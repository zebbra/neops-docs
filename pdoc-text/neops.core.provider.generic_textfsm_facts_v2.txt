Module neops.core.provider.generic_textfsm_facts_v2
===================================================

Classes
-------

`GenericTextFSMFactsV2(**kwargs)`
:   This Provider is used to get structured data from show commands from a device.
    The show command is executed on the device and the output is parsed by [TextFSM](/appendix_sub/appendix_textfsm).

    ### Ancestors (in MRO)

    * neops.core.provider.base.base_facts.NeopsFactsBaseProvider
    * neops.core.provider.base.base.NeopsBaseProvider
    * neops.core.provider.base.base_run_cycle.BaseRunCycle
    * neops.core.provider.base.base_process_result_cycle.BaseProcessResultCycle
    * abc.ABC
    * neops.core.libs.helptext.help_text_resolver.HelpTextResolver

    ### Methods

    `pre_run_on_nornir_device(self, execute_on: List[int], execute_on_type: neops.core.provider.base.enum.RunOnEnum, task_kwargs: Dict[Any, Any], task: nornir.core.task.Task, nornir_device_id: int, **kwargs) ‑> Any`
    :   Processes the command Jinja template and executes the show command on the device

    `run_global(self, task_kwargs: Dict[Any, Any], **kwargs) ‑> Union[Dict[Any, Any], NoneType]`
    :   Processes the output and the mapping template if the "add facts to" is set to GLOBAL

    `run_on_client_of_interface(self, task_input_kwargs: Dict[Any, Any], task_kwargs: Dict[Any, Any], task: nornir.core.task.Task, nornir_device_id: int, device_id: int, interface_id: int, client_id: int, client_result: neops.core.provider.base.result.coupled_provider_result_types.ProviderClientResult, **kwargs) ‑> Any`
    :   Processes the output and the mapping template if the "add facts to" is set to CLIENT

    `run_on_device(self, task_input_kwargs: Dict[Any, Any], task_kwargs: Dict[Any, Any], task: nornir.core.task.Task, nornir_device_id: int, device_id: int, device_result: neops.core.provider.base.result.coupled_provider_result_types.ProviderDeviceResult, **kwargs) ‑> Any`
    :   Processes the output and the mapping template if the "add facts to" is set to DEVICE

    `run_on_device_group(self, device_group_id: int, task_kwargs: Dict[Any, Any], device_group_result: neops.core.provider.base.result.coupled_provider_result_types.ProviderDeviceGroupResult, **kwargs) ‑> Union[Dict[Any, Any], NoneType]`
    :   Processes the output and the mapping template if the "add facts to" is set to GROUP

    `run_on_interface(self, task_input_kwargs: Dict[Any, Any], task_kwargs: Dict[Any, Any], task: nornir.core.task.Task, nornir_device_id: int, device_id: int, interface_id: int, interface_result: neops.core.provider.base.result.coupled_provider_result_types.ProviderInterfaceResult, **kwargs) ‑> Any`
    :   Processes the output and the mapping template if the "add facts to" is set to INTERFACE