Module neops.core.provider.generic_jinja_check
==============================================

Classes
-------

`GenericJinjaCheckProvider(**kwargs)`
:   This Provider is used to set [check](/checks) results from existing facts or checks.

    ### Ancestors (in MRO)

    * neops.core.provider.base.base_check.NeopsCheckBaseProvider
    * neops.core.provider.base.base.NeopsBaseProvider
    * neops.core.provider.base.base_run_cycle.BaseRunCycle
    * neops.core.provider.base.base_process_result_cycle.BaseProcessResultCycle
    * abc.ABC
    * neops.core.libs.helptext.help_text_resolver.HelpTextResolver

    ### Methods

    `run_on_client_of_interface(self, task: nornir.core.task.Task, client_id: int, check_on: str, template: str, **kwargs) ‑> Union[neops.core.provider.base.base_check.NeopsCheckResult, NoneType]`
    :   Processes the template if the "Check on" is set to CLIENT ON INTERFACE

    `run_on_client_of_location(self, client_id: int, check_on: str, template: str, **kwargs) ‑> Union[neops.core.provider.base.base_check.NeopsCheckResult, NoneType]`
    :   Processes the template if the "Check on" is set to CLIENT ON GROUP

    `run_on_device(self, task: nornir.core.task.Task, device_id: int, check_on: str, template: str, **kwargs) ‑> Union[neops.core.provider.base.base_check.NeopsCheckResult, NoneType]`
    :   Processes the template if the "Check on" is set to DEVICE

    `run_on_device_group(self, device_group_id: int, check_on: str, template: str, **kwargs) ‑> Union[neops.core.provider.base.base_check.NeopsCheckResult, NoneType]`
    :   Processes the template if the "Check on" is set to GROUP

    `run_on_interface(self, task: nornir.core.task.Task, interface_id: int, check_on: str, template: str, **kwargs) ‑> Union[neops.core.provider.base.base_check.NeopsCheckResult, NoneType]`
    :   Processes the template if the "Check on" is set to INTERFACE