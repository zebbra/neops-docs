Module neops.core.provider.base.base
====================================

Classes
-------

`NeopsBaseProvider(**kwargs)`
:   Description of the base run cycle for a provider

    ### Ancestors (in MRO)

    * neops.core.provider.base.base_run_cycle.BaseRunCycle
    * neops.core.provider.base.base_process_options.BaseProcessOptions
    * abc.ABC

    ### Descendants

    * neops.core.provider.base.base_check.NeopsCheckBaseProvider
    * neops.core.provider.base.base_configure.NeopsConfigureBaseProvider
    * neops.core.provider.base.base_facts.NeopsFactsBaseProvider
    * neops.core.provider.deprecated.device_test_provider.DeviceTestProvider
    * neops.core.provider.deprecated.global_from_excel.GlobalFromExcel
    * neops.core.provider.deprecated.global_test_provider.GlobalTestProvider
    * neops.core.provider.deprecated.group_test_provider.GroupTestProvider
    * neops.core.provider.deprecated.interface_test_provider.InterfaceTestProvider
    * neops.core.provider.device_discovery.DeviceDiscoveryProvider
    * neops.core.provider.device_exec_from_jinja.DeviceJinjaExecProvider
    * neops.core.provider.device_image_cleanup.DeviceImageCleanUpProvider
    * neops.core.provider.device_restart.DeviceRestartProvider
    * neops.core.provider.device_rollback.DeviceRollbackProvider
    * neops.core.provider.device_rommon_upgrade.DeviceRommonUpgradeProvider
    * neops.core.provider.device_rommon_upgrade_unattended.DeviceRommonUpgradeUnattendedProvider
    * neops.core.provider.device_stack_auto_upgrade.DeviceStackAutoUpgradeUnattendedProvider
    * neops.core.provider.device_upgrade.DeviceUpgradeProvider
    * neops.core.provider.device_upgrade_unattended.DeviceUpgradeUnattendedProvider
    * neops.core.provider.generic_from_excel.GenericFromExcel
    * neops.core.provider.generic_report.GenericReportProvider
    * neops.core.provider.generic_simple_workflow.GenericSimpleWorkflow
    * neops.core.provider.generic_test_provider.GenericTestProvider
    * neops.core.provider.global_mail.GlobalMail
    * neops.customer.migros.provider.global_pom_import.GlobalImportLocationsFromPOMProvider
    * neops.customer.migros.provider.location_bluecat_import_networks.LocationImportNetworksFromBluecatProvider
    * neops.customer.migros.provider.location_pom_import_clients.LocationImportClientsFromPOMProvider

    ### Class variables

    `deprecated: bool`
    :

    `description: str`
    :

    `execution_updater: neops.core.provider.base.execution_updater.ExecutionUpdater`
    :

    `json_schema: Dict`
    :

    `provider_type: neops.core.provider.base.enum.ProviderTypeEnum`
    :

    `result_writer: neops.core.provider.base.base_result_writer.BaseResultWriter`
    :

    `run_input_json_schema: Dict`
    :

    `run_on: neops.core.provider.base.enum.RunOnEnum`
    :

    `run_on_all_if_empty: bool`
    :

    `run_on_result`
    :

    `run_on_strict: bool`
    :

    `short_description: str`
    :

    `success_message`
    :

    `validate_input: bool`
    :

    ### Static methods

    `inherit_json_schema(json_schema: Dict = None) ‑> Dict`
    :   Merges JSON Schemas: If this method is called on one of the classes children, then
        super().json_schema resolves, else we do a pseudo merge.
        :param json_schema:
        :return:

    `init_from_task_model(neops_task: neops.core.models.neops_task.NeopsTask, nr: nornir.core.Nornir = None, **kwargs)`
    :

    `merge_run_input_json_schema(json_schema: Dict = None)`
    :

    ### Methods

    `add_nornir_processors(self)`
    :

    `init_adjust_run_on(self, execute_on: Union[List[int], NoneType] = None, execute_on_type: Union[neops.core.provider.base.enum.RunOnEnum, NoneType] = None, dry_run: Union[bool, NoneType] = None, task_input_kwargs: Union[Dict[Any, Any], NoneType] = None, search_query: str = '', task_kwargs: Union[Dict[Any, Any], NoneType] = None, **kwargs) ‑> NoneType`
    :

    `init_before_run(self, task_input_kwargs: Dict, execute_on: List = None, execute_on_type: neops.core.provider.base.enum.RunOnEnum = device, dry_run: bool = True, search_query: str = '', **kwargs) ‑> NoneType`
    :

    `init_without_run(self, **kwargs) ‑> NoneType`
    :

    `print_results(self)`
    :

    `run(self, task_input_kwargs: Dict, execute_on: List = None, execute_on_type: neops.core.provider.base.enum.RunOnEnum = device, dry_run: bool = True, search_query: str = '', **kwargs) ‑> NoneType`
    :

    `update_do(self, do: str, append: bool = True) ‑> NoneType`
    :

    `update_done(self, done: str, append: bool = True) ‑> NoneType`
    :

    `update_log(self, log: str, append: bool = True) ‑> NoneType`
    :

    `validate_schema(self, task_kwargs: Dict = None) ‑> NoneType`
    :

    `write_results(self, finish: bool = False) ‑> NoneType`
    :