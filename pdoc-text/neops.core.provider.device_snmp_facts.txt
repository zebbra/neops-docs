Module neops.core.provider.device_snmp_facts
============================================

Classes
-------

`DeviceSNMPFactsProvider(**kwargs)`
:   The base neops provider contains all methods and required data processing for a concrete provider.
    To create a new provider, either extend this NeopsBaseProvider or a concrete provider

    ### Ancestors (in MRO)

    * neops.core.provider.base.base_facts.NeopsFactsBaseProvider
    * neops.core.provider.base.base.NeopsBaseProvider
    * neops.core.provider.base.base_run_cycle.BaseRunCycle
    * neops.core.provider.base.base_process_options.BaseProcessOptions
    * abc.ABC
    * neops.core.libs.helptext.help_text_resolver.HelpTextResolver

    ### Class variables

    `deprecated: bool`
    :

    `description: str`
    :

    `execution_updater: neops.core.provider.base.execution_updater.ExecutionUpdater`
    :

    `json_schema: Dict`
    :

    `provider_type: neops.core.provider.base.enum.ProviderTypeEnum`
    :

    `result_writer: neops.core.provider.base.base_result_writer.BaseResultWriter`
    :

    `run_input_json_schema: Dict`
    :

    `run_on: neops.core.provider.base.enum.RunOnEnum`
    :

    `run_on_all_if_empty: bool`
    :

    `run_on_strict: bool`
    :

    `short_description: str`
    :

    `validate_input: bool`
    :

    ### Methods

    `oid_str_to_tuple(self, oid: str)`
    :

    `run_on_device(self, task: nornir.core.task.Task, device_id: int, dry_run: bool = True, execute_on: List = None, **kwargs) ‑> Union[Dict, nornir.core.task.Result]`
    :